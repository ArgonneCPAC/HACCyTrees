################################################################################
# This is an example configuration for the Last Journey simulation             #
#                                                                              #
# The required sections are:                                                   #
# - simulation: name of the simulation, data location                          #
# - columns:    the naming of the columns in the treenode catalogs             #
# - output:     the output file and the columns to store / calculate           #
# - algorithm:  some additional switches, failure triggers, verbosity          #
################################################################################

[simulation]
# the simulation is used to determine cosmotools steps, scale factors, etc.
# has to be supported by haccytrees/simulations.py
simulation         = LastJourney
# the base-path of the treenode catalogs. The files are assumed to be named e.g.
# ./treenodes/m000p-499.treenodes
treenode_base      = ./treenodes/m000p-
# alternatively, you can specify it like this: (useful for galaxymergertrees!)
# treenode_base     = ./treenodes/m000p-#.treenodes


[columns]
# how the fields in the treenode catalogs are named â€“ can change from simulation
# to simulation, e.g. fof_halo_mean vs fof_halo_com.
fof_halo_center_x = fof_halo_center_x
fof_halo_center_y = fof_halo_center_y
fof_halo_center_z = fof_halo_center_z
fof_halo_com_x    = fof_halo_mean_x
fof_halo_com_y    = fof_halo_mean_y
fof_halo_com_z    = fof_halo_mean_z
sod_halo_center_x = sod_halo_min_pot_x
sod_halo_center_y = sod_halo_min_pot_y
sod_halo_center_z = sod_halo_min_pot_z
sod_halo_com_x    = sod_halo_mean_x
sod_halo_com_y    = sod_halo_mean_y
sod_halo_com_z    = sod_halo_mean_z
sod_halo_mass     = sod_halo_mass
sod_halo_radius   = sod_halo_radius
tree_node_index   = tree_node_index
desc_node_index   = desc_node_index
tree_node_mass    = tree_node_mass

# This determines which field is used to distribute the halos among the ranks.
# Has to be available for all halos, e.g. not SOD positions.
node_position_x   = fof_halo_center_x
node_position_y   = fof_halo_center_y
node_position_z   = fof_halo_center_z

[output]
# The base of the output files. If `split_output` is enabled, files will be
# named e.g. `m000p.forest.001.hdf5` for rank 0.
output_base    = m000p.forest
# If false, haccytrees will store the forest trees in a single file. Not
# suitable for large simulations.
split_output   = yes
# The base path where temporary files will be stored. If this setting is
# commented out, all the data will be kept in memory instead.
temporary_path = tmp/m000p.temp
# The fields that will be copied to the final output. If a list of two names
# are given, the treenode data given by the first one will be stored under the
# second one (renaming).
copy_fields    = [
    "tree_node_index",
    "desc_node_index",
    "tree_node_mass",
    "fof_halo_tag",
    "fof_halo_count",
    "fof_halo_mass",
    "fof_halo_center_x",
    "fof_halo_center_y",
    "fof_halo_center_z",
    "sod_halo_count",
    "sod_halo_mass",
    "sod_halo_radius",
    "sod_halo_cdelta",
    "sod_halo_cdelta_error",
    ["sod_halo_c_acc_mass", "sod_halo_cdelta_accum"],
    ["sod_halo_c_peak_mass", "sod_halo_cdelta_peak"]
    ]
# Additional fields that are derived from other fields. See
# haccytrees/mergertrees/assemble/derived_fields.py for the supported options.
derived_fields  = ["xoff_fof", "xoff_sod", "xoff_com"]

[algorithm]
# If no, the exchange of orphaned halos is amongst the 26 neighbors first, and
# only the remaining orphans are distributed all-to-all. If yes, the orphans are
# directly exchanged amongst all ranks (slower and more memory intensive).
do_all2all_exchange    = no
# If yes, the code will abort if an orphan cannot be assigned to a rank. If no,
# the orphan will be treated as a new root, and the code continues
fail_on_desc_not_found = yes
# A waittime in seconds until additional communicator (3D cart and 26-neighbor
# graph) are constructed. Can mitigate some `PG not found` MPI errors that occur
# on cooley without waittime (may be due to some bug in mpi4py)
mpi_waittime           = 5
# Increasing verbosity. Currently the max is 2, printing distribute and exchange
# information from each rank.
verbose                = 0

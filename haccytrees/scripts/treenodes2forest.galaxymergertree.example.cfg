################################################################################
# This is an example configuration for a galaxymergertree                      #
#                                                                              #
# The required sections are:                                                   #
# - simulation: name of the simulation, data location                          #
# - columns:    the naming of the columns in the treenode catalogs             #
# - output:     the output file and the columns to store / calculate           #
# - algorithm:  some additional switches, failure triggers, verbosity          #
################################################################################

[simulation]
# the simulation is used to determine cosmotools steps, scale factors, etc.
# has to be supported by haccytrees/simulations.py
simulation         = simulation_example.cfg
# the base-path of the treenode catalogs. The files are assumed to be named e.g.
# ./treenodes/m000p-499.treenodes
treenode_base      = ../trees/m000p-#.galaxytreenodes


[columns]
# how the fields in the treenode catalogs are named â€“ can change from simulation
# to simulation, e.g. fof_halo_mean vs fof_halo_com.
tree_node_index   = tree_node_index
desc_node_index   = desc_node_index
tree_node_mass    = tree_node_mass

# This determines which field is used to distribute the halos among the ranks.
# Has to be available for all halos, e.g. not SOD positions.
node_position_x   = fof_halo_center_x
node_position_y   = fof_halo_center_y
node_position_z   = fof_halo_center_z

[output]
# The base of the output files. If `split_output` is enabled, files will be
# named e.g. `m000p.forest.001.hdf5` for rank 0.
output_base    = m000p.forest
# If false, haccytrees will store the forest trees in a single file. Not
# suitable for large simulations.
split_output   = yes
# The base path where temporary files will be stored. If this setting is
# commented out, all the data will be kept in memory instead.
temporary_path = tmp/m000p.temp
# The fields that will be copied to the final output. If a list of two names
# are given, the treenode data given by the first one will be stored under the
# second one (renaming).
copy_fields    = [
    "tree_node_index",
    "desc_node_index",
    "tree_node_mass",
    "fof_halo_center_x",
    "fof_halo_center_y",
    "fof_halo_center_z",
    "fof_halo_count",
    "fof_halo_galaxy_count",
    "fof_halo_tag",
    "gal_1D_stellar_vel_disp",
    "gal_1D_vel_disp",
    "gal_2Rhalf_stellar_mass",
    "gal_angmom_x",
    "gal_angmom_y",
    "gal_angmom_z",
    "gal_avg_eta",
    "gal_avg_vw",
    "gal_bhr",
    "gal_bulge_stellar_mass",
    "gal_center_x",
    "gal_center_y",
    "gal_center_z",
    "gal_com_vx",
    "gal_com_vx_dm",
    "gal_com_vx_gas",
    "gal_com_vy",
    "gal_com_vy_dm",
    "gal_com_vy_gas",
    "gal_com_vz",
    "gal_com_vz_dm",
    "gal_com_vz_gas",
    "gal_com_x",
    "gal_com_x_dm",
    "gal_com_x_gas",
    "gal_com_y",
    "gal_com_y_dm",
    "gal_com_y_gas",
    "gal_com_z",
    "gal_com_z_dm",
    "gal_com_z_gas",
    "gal_count_agn",
    "gal_count_bar",
    "gal_count_dm",
    "gal_count_gas",
    "gal_count_sfgas",
    "gal_count_star",
    "gal_count_wind",
    "gal_dbscan_count",
    "gal_dbscan_mstar",
    "gal_dbscan_radius",
    "gal_eigR1X",
    "gal_eigR1Y",
    "gal_eigR1Z",
    "gal_eigR2X",
    "gal_eigR2Y",
    "gal_eigR2Z",
    "gal_eigR3X",
    "gal_eigR3Y",
    "gal_eigR3Z",
    "gal_eigS1X",
    "gal_eigS1Y",
    "gal_eigS1Z",
    "gal_eigS2X",
    "gal_eigS2Y",
    "gal_eigS2Z",
    "gal_eigS3X",
    "gal_eigS3Y",
    "gal_eigS3Z",
    "gal_half_stellar_rad",
    "gal_idx",
    "gal_ke",
    "gal_mass",
    "gal_mass_agn",
    "gal_mass_bar",
    "gal_mass_dm",
    "gal_mass_gas",
    "gal_mass_sfgas",
    "gal_mass_star",
    "gal_mass_wind",
    "gal_max_cir_vel",
    "gal_mmagn_id",
    "gal_mmagn_mass",
    "gal_mmagn_x",
    "gal_mmagn_y",
    "gal_mmagn_z",
    "gal_radius",
    "gal_sfr",
    "gal_tag"
    ]

[algorithm]
# If no, the exchange of orphaned halos is amongst the 26 neighbors first, and
# only the remaining orphans are distributed all-to-all. If yes, the orphans are
# directly exchanged amongst all ranks (slower and more memory intensive).
do_all2all_exchange    = no
# If yes, the code will abort if an orphan cannot be assigned to a rank. If no,
# the orphan will be treated as a new root, and the code continues
fail_on_desc_not_found = yes
# A waittime in seconds until additional communicator (3D cart and 26-neighbor
# graph) are constructed. Can mitigate some `PG not found` MPI errors that occur
# on cooley without waittime (may be due to some bug in mpi4py)
mpi_waittime           = 0
# Increasing verbosity. Currently the max is 2, printing distribute and exchange
# information from each rank.
verbose                = 0
